import utils
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils
from keras.regularizers import l2, activity_l2
from os import path

dataset = "train_keras_noNorm.dat"
model_weights_name = "wt_ensemble_member"
split = 0.8

if path.isfile(dataset) == False:
    utils.save_training_data_as_vector(dataset, "trainLabels.csv", "train", )
outfile = open("ensemble_log.txt", mode='w')
outfile.write("Begin training by reading the pickled dataset\n")
X, y = utils.read_training_data(dataset)
mean_img = np.mean(X, axis = 0)
X -= mean_img
X /= 255

outfile.write("shape of the dataset and  labels: x={} y={}\n".format(X.shape, y.shape))
num_training = int(X.shape[0] * split)
num_validation = X.shape[0] - num_training
outfile.write("Training size = {}\n".format(num_training))
outfile.write("Validation size = {}\n".format(num_validation))

batch_size = 32
nb_classes = 10
nb_epoch = 300
ensemble_size = 5
img_channels, img_rows, img_cols = 3, 32, 32

for i in range(ensemble_size):
	outfile.write("training model: {}\n".format(i))
	training_idx = np.random.randint(X.shape[0], size=num_training)
	val_idx = np.random.randint(X.shape[0], size=num_validation)
	X_train, y_train = X[training_idx,:], y[training_idx]
	X_val, y_val = X[val_idx,:], y[val_idx]

	# convert class vectors to binary class matrices
	Y_train = np_utils.to_categorical(y_train, nb_classes)
	Y_val = np_utils.to_categorical(y_val, nb_classes)

	model = utils.give_keras_model(img_channels, img_rows, img_cols, nb_classes)

	# this will do preprocessing and realtime data augmentation
	datagen = ImageDataGenerator(
		featurewise_center=False,  # set input mean to 0 over the dataset
		samplewise_center=False,  # set each sample mean to 0
		featurewise_std_normalization=False,  # divide inputs by std of the dataset
		samplewise_std_normalization=False,  # divide each input by its std
		zca_whitening=False,  # apply ZCA whitening
		rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
		width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
		height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
		horizontal_flip=True,  # randomly flip images
		vertical_flip=False  # randomly flip images
		)
	# compute quantities required for featurewise normalization
	# (std, mean, and principal components if ZCA whitening is applied)
	datagen.fit(X_train)
	# fit the model on the batches generated by datagen.flow()
	model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),
		            samples_per_epoch=X_train.shape[0],
		            nb_epoch=nb_epoch,
		            validation_data=(X_val, Y_val),
		            nb_worker=1)

	outfile.write("\nnow, lets do some prediction on the validation set!\n")
	pred = model.predict(X_val, verbose=1).astype(float)
	pred = np.argmax(pred, axis=1)
	accuracy = np.mean((y_val == pred).astype(float)) * 100
	str = "##########################################"
	outfile.write("\n{}\naccuracy on validation data: {}%\n{}\n\n".format(str,accuracy,str))
	#save model
	outfile.write("saving model weights...\n")
	model.save_weights("{}{}.h5".format(model_weights_name, i),overwrite=True)
	outfile.write("\nDone saving weights for {}{}.\n".format(model_weights_name, i))

outfile.close()
   
